name: CI Pipeline with Security Check

permissions:
  contents: read
  packages: write
  attestations: write
  id-token: write
  security-events: write

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # 1. Code Checkout and setup
  setup:
    # Skip CI when commit message contains "[skip ci]"
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.12
        id: python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

  # 2. Lint / Formatting
  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Install lint tools
        run: pip install black flake8
      - name: Ensure Python dependencies
        run: |
          pip install --upgrade pip setuptools
          pip install -r requirements.txt
      #- name: Run Black (auto-format)
      #  run: black .
      - name: Verify Black formatting
        run: black --check .
      #- name: Lint with Flake8
      #  run: flake8 .

  # 3. Unit Test
  #test:
  #  needs: setup
  #  runs-on: ubuntu-latest
  #  steps:
  #    - uses: actions/checkout@v4
  #    - name: Install test deps
  #      run: pip install -r requirements.txt pytest
  #    - name: Run pytest
  #      run: pytest --maxfail=1 --disable-warnings --junitxml=reports/junit.xml
  #    - name: Upload Test Report
  #      uses: actions/upload-artifact@v3
  #      with:
  #        name: junit-report
  #        path: reports/junit.xml

  # 4. Dependency Scan
  dependency_scan:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Prepare reports directory
        run: mkdir -p reports
      - name: Install audit tools
        run: pip install safety pip-audit
      - name: Run pip-audit on requirements
        run: pip-audit -r requirements.txt -f json > reports/pip-audit.json
      - name: Run Safety
        run: |
          pip install safety
          safety check --json --file=requirements.txt > reports/safety.json
      - name: Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-reports
          path: reports/*.json

  # 5. SAST: GitHub CodeQL
  codeql:
    needs: setup
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          output: results/codeql-results.sarif

  
  # 6. Build and push to  GitHub Container Registry (ghcr.io)
  build:
    needs: [setup, lint, dependency_scan, codeql]
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build_and_push.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 6-1. Login to ghcr.or
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 6-2 Docker Buildx のセットアップ（マルチプラットフォーム対応）
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 6-3 docker/metadata-action で tags と digest を自動生成
      - id: docker_meta_ghcr
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ github.repository }}
          tags: type=sha,format=long

      # 6-4. Docker image build and push with SHA ＆ latest tag
      - name: Build and Push to GHCR
        id: build_and_push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          #platforms: linux/amd64,linux/arm64,linux/arm/v7
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ steps.docker_meta_ghcr.outputs.tags }}
            ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:latest
  
  # 7. Signing by Cosign with OIDC token
  signing:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: write
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@main

      - name: Login to GitHub Container Registry for Cosign
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign GHCR image with Cosign
        env:
          IMAGE_URI: ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:${{ github.sha }}
          DIGEST: ${{ needs.build.outputs.image-digest }}
        run: cosign sign --yes ${IMAGE_URI}@${DIGEST}
  
  # 8. Container Image Scan by Trivy
  image_scan:
    needs: signing
    runs-on: ubuntu-latest
    steps:
      - name: Prepare reports directory
        run: mkdir -p reports
      - name: Scan GHCR image with Trivy
        uses: aquasecurity/trivy-action@v0.9.2
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:${{ github.sha }}
          format: json
          output: reports/ghcr-trivy-report.json
          exit-code: '1'
          severity: HIGH,CRITICAL

  # 9. SBOM の生成（Anchore sbom-action を利用）とアップロード
  sbom:
    needs: image_scan
    runs-on: ubuntu-latest
    steps:
      - name: Prepare workspace
        run: mkdir -p reports
      - name: Generate SBOM with Anchore SBOM Action
        uses: anchore/sbom-action@main
        with:
          image: ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:${{ github.sha }}
          output_format: cyclonedx-json
          output_file: sbom-${{ github.sha }}.json

      - name: Upload SBOM Artifact
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom-${{ github.sha }}.json

  ##　１０. Notification to Slack
  #notify_slack:
  #  #needs: build
  #  #if: always()
  #  runs-on: ubuntu-latest
  #  steps:
  #    - name: "Slack: CI Success"
  #      if: ${{ job.status == 'success' }}
  #      uses: slackapi/slack-github-action@v1.23.0
  #      with:
  #        payload: |
  #          {
  #            "channel": "#bot-admin-dev",
  #            "text": ":white_check_mark: CI Pipeline が正常に完了しました\n> リポジトリ: `${{ github.repository }}`\n> コミット: `${{ github.sha }}`"
  #          }
  #      env:
  #        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  #    - name: "Slack: CI Failure"
  #      if: ${{ job.status == 'failure' }}
  #      uses: slackapi/slack-github-action@v1.23.0
  #      with:
  #        payload: |
  #          {
  #            "channel": "#bot-admin-dev",
  #            "text": ":x: CI Pipeline が失敗しました\n> リポジトリ: `${{ github.repository }}`\n> コミット: `${{ github.sha }}`\n> 詳細: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|ログを確認>"
  #          }
  #      env:
  #        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  #    - name: "Slack: CI Cancelled"
  #      if: ${{ job.status == 'cancelled' }}
  #      uses: slackapi/slack-github-action@v1.23.0
  #      with:
  #        payload: |
  #          {
  #            "channel": "#bot-admin-dev",
  #            "text": ":warning: CI Pipeline がキャンセルされました\n> リポジトリ: `${{ github.repository }}`\n> コミット: `${{ github.sha }}`"
  #          }
  #      env:
  #        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
